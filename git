[33mcommit 7f20688cbfacd04af7ec612c749072bb23abe425[m
Author: Vuser <vuser@deb64>
Date:   Sat Mar 25 11:16:10 2017 +0800

    Add some courses examples

[1mdiff --git a/cpp_example/lecture4/data b/cpp_example/lecture4/data[m
[1mnew file mode 100644[m
[1mindex 0000000..b48ce03[m
[1m--- /dev/null[m
[1m+++ b/cpp_example/lecture4/data[m
[36m@@ -0,0 +1,5 @@[m
[32m+[m[32m123[m
[32m+[m[32m321[m
[32m+[m[32m456 322[m
[32m+[m[32m32[m
[32m+[m[32m109[m
\ No newline at end of file[m
[1mdiff --git a/cpp_example/lecture4/for_loop.cc b/cpp_example/lecture4/for_loop.cc[m
[1mnew file mode 100644[m
[1mindex 0000000..6ac40f9[m
[1m--- /dev/null[m
[1m+++ b/cpp_example/lecture4/for_loop.cc[m
[36m@@ -0,0 +1,13 @@[m
[32m+[m[32m#include <iostream>[m
[32m+[m[41m [m
[32m+[m[32mint main()[m
[32m+[m[32m{[m
[32m+[m[32m  // for loop with a compound statement[m
[32m+[m[32m  int sum = 0, j = 1, i = 4;[m
[32m+[m[32m  std::cin >> i;[m
[32m+[m[32m  for (j = i; sum < 100; j++) {[m
[32m+[m[32m    sum += j;[m
[32m+[m[32m  }[m
[32m+[m[32m  std::cout << "The sum from " << i << " to " << j-1[m
[32m+[m	[32m    << " inclusive is " << sum << std::endl;[m[41m [m
[32m+[m[32m}[m
[1mdiff --git a/cpp_example/lecture4/sequential.cc b/cpp_example/lecture4/sequential.cc[m
[1mnew file mode 100644[m
[1mindex 0000000..a2bf996[m
[1m--- /dev/null[m
[1m+++ b/cpp_example/lecture4/sequential.cc[m
[36m@@ -0,0 +1,9 @@[m
[32m+[m[32m#include <iostream>[m
[32m+[m
[32m+[m[32mint main()[m
[32m+[m[32m{[m
[32m+[m[32m  int n{1}; // declaration statement[m
[32m+[m[32m  n = n+1; // expression statement[m
[32m+[m[32m  std::cout << "n = " << n << std::endl; // expression statement[m
[32m+[m[32m  return 0; // return statement[m
[32m+[m[32m}[m
[1mdiff --git a/cpp_example/lecture4/simple.cc b/cpp_example/lecture4/simple.cc[m
[1mnew file mode 100644[m
[1mindex 0000000..f8b643a[m
[1m--- /dev/null[m
[1m+++ b/cpp_example/lecture4/simple.cc[m
[36m@@ -0,0 +1,4 @@[m
[32m+[m[32mint main()[m
[32m+[m[32m{[m
[32m+[m[32m  return 0;[m
[32m+[m[32m}[m
[1mdiff --git a/cpp_example/lecture4/sum_number.cc b/cpp_example/lecture4/sum_number.cc[m
[1mnew file mode 100644[m
[1mindex 0000000..911a466[m
[1m--- /dev/null[m
[1m+++ b/cpp_example/lecture4/sum_number.cc[m
[36m@@ -0,0 +1,11 @@[m
[32m+[m[32m#include <iostream>[m
[32m+[m
[32m+[m[32mint main()[m
[32m+[m[32m{[m
[32m+[m[32m  std::cout << "Enter two numbers:" << std::endl;[m
[32m+[m[32m  int v1{0}, v2{0};[m
[32m+[m[32m  std::cin >> v1 >> v2;//input v1 and v2[m
[32m+[m[32m  std::cout << "The sum of " << v1 << " and " << v2[m
[32m+[m[41m  [m	[32m    << " is " << v1 + v2 << "." << std::endl;[m
[32m+[m[32m  return 0;[m
[32m+[m[32m}[m
[1mdiff --git a/cpp_example/lecture4/while_cin.cc b/cpp_example/lecture4/while_cin.cc[m
[1mnew file mode 100644[m
[1mindex 0000000..884f072[m
[1m--- /dev/null[m
[1m+++ b/cpp_example/lecture4/while_cin.cc[m
[36m@@ -0,0 +1,12 @@[m
[32m+[m[32m#include <iostream>[m
[32m+[m[41m [m
[32m+[m[32mint main()[m
[32m+[m[32m{[m
[32m+[m[32m  int sum{0}, value{0};[m
[32m+[m[32m  // exit loop until the expression can be evaluated as false[m
[32m+[m[32m  while (std::cin >> value)[m
[32m+[m[32m    sum += value;[m
[32m+[m
[32m+[m[32m  std::cout << "The sum is " << sum << std::endl;[m
[32m+[m[32m  return 0;[m
[32m+[m[32m}[m
[1mdiff --git a/cpp_example/lecture4/while_loop.cc b/cpp_example/lecture4/while_loop.cc[m
[1mnew file mode 100644[m
[1mindex 0000000..2301943[m
[1m--- /dev/null[m
[1m+++ b/cpp_example/lecture4/while_loop.cc[m
[36m@@ -0,0 +1,20 @@[m
[32m+[m[32m#include <iostream>[m
[32m+[m[41m [m
[32m+[m[32mint main()[m
[32m+[m[32m{[m
[32m+[m[32m  // while loop with a single statement[m
[32m+[m[32m  int i = 0;[m
[32m+[m[32m  while (i < 10)[m
[32m+[m[32m    i++;[m
[32m+[m[32m  std::cout << i << std::endl;[m
[32m+[m[41m [m
[32m+[m[32m  // while loop with a compound statement[m
[32m+[m[32m  int sum = 0, j = 0;[m
[32m+[m[32m  while (sum < 100) {[m
[32m+[m[32m    j++;[m
[32m+[m[32m    sum += j;[m
[32m+[m[32m    std::cout << "j = " << j << std::endl;[m
[32m+[m[32m  }[m
[32m+[m[32m  std::cout << "The sum from 1 to " << j[m
[32m+[m	[32m    << " inclusive is " << sum << std::endl;[m[41m [m
[32m+[m[32m}[m
[1mdiff --git a/cpp_example/lecture5/Vector3D.cc b/cpp_example/lecture5/Vector3D.cc[m
[1mnew file mode 100644[m
[1mindex 0000000..14d7a25[m
[1m--- /dev/null[m
[1m+++ b/cpp_example/lecture5/Vector3D.cc[m
[36m@@ -0,0 +1,53 @@[m
[32m+[m[32m#include "Vector3D.h"[m
[32m+[m
[32m+[m[32m#include <cmath>[m
[32m+[m[32m#include <iostream>[m
[32m+[m
[32m+[m[32mdouble Vector3D::Length () const[m
[32m+[m[32m{[m
[32m+[m[32m  return std::sqrt(x_ * x_ + y_ * y_ + z_ * z_);[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mvoid Vector3D::Scale (double a)[m
[32m+[m[32m{[m
[32m+[m[32m  x_ *= a;[m
[32m+[m[32m  y_ *= a;[m
[32m+[m[32m  z_ *= a;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mdouble Vector3D::DotProduct (const Vector3D & v) const[m
[32m+[m[32m{[m
[32m+[m[32m  return x_ * v.x_ + y_ * v.y_ + z_ * v.z_;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mVector3D Vector3D::CrossProduct (const Vector3D &v) const[m
[32m+[m[32m{[m
[32m+[m[32m  return Vector3D( y_ * v.z_ - z_ * v.y_,[m
[32m+[m		[32m   z_ * v.x_ - x_ * v.z_,[m
[32m+[m		[32m   x_ * v.y_ - y_ * v.x_);[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mvoid Vector3D::Print () const[m
[32m+[m[32m{[m
[32m+[m[32m  std::cout << "(" << x_ << ", " << y_ << ", " << z_ << ")" << std::endl;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mvoid Vector3D::Inverse ()[m
[32m+[m[32m{[m
[32m+[m[32m  Scale(-1);[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mVector3D & Vector3D::operator+ (const Vector3D & v)[m
[32m+[m[32m{[m
[32m+[m[32m  x_ += v.x_;[m
[32m+[m[32m  y_ += v.y_;[m
[32m+[m[32m  z_ += v.z_;[m
[32m+[m[32m  return *this;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mstd::ostream &operator<<(std::ostream &os, const Vector3D & v)[m
[32m+[m[32m{[m
[32m+[m[32m  os << "(" << v.GetX() << ", " << v.GetY() << ", "[m
[32m+[m[32m     << v.GetZ() << ")";[m
[32m+[m[32m  return os;[m
[32m+[m[32m}[m
[1mdiff --git a/cpp_example/lecture5/Vector3D.h b/cpp_example/lecture5/Vector3D.h[m
[1mnew file mode 100644[m
[1mindex 0000000..2921758[m
[1m--- /dev/null[m
[1m+++ b/cpp_example/lecture5/Vector3D.h[m
[36m@@ -0,0 +1,56 @@[m
[32m+[m[32m#ifndef VECTOR_3D_H[m
[32m+[m[32m#define VECTOR_3D_H[m
[32m+[m
[32m+[m[32m#include <iostream>[m
[32m+[m
[32m+[m[32m// this is a simple example of a user-defined type[m
[32m+[m[32m// of vector 3d[m
[32m+[m
[32m+[m[32mclass Vector3D {[m
[32m+[m
[32m+[m[32mprivate:[m
[32m+[m[32m  double x_;[m
[32m+[m[32m  double y_;[m
[32m+[m[32m  double z_;[m
[32m+[m
[32m+[m[32mpublic:[m
[32m+[m[32m  // the default constructor[m
[32m+[m[32m  Vector3D (double x = 0, double y = 0, double z = 0)[m
[32m+[m[32m    :x_{x}, y_{y}, z_{z} {}[m
[32m+[m
[32m+[m[32m  // set functions[m
[32m+[m[32m  void SetX (double x) { x_ = x; }[m
[32m+[m[32m  void SetY (double y) { y_ = y; }[m
[32m+[m[32m  void SetZ (double z) { z_ = z; }[m
[32m+[m
[32m+[m[32m  // get functions[m
[32m+[m[32m  double GetX () const { return x_; }[m
[32m+[m[32m  double GetY () const { return y_; }[m
[32m+[m[32m  double GetZ () const { return z_; }[m
[32m+[m[41m  [m
[32m+[m[32m  // calculate the length of the vector[m
[32m+[m[32m  double Length () const;[m
[32m+[m
[32m+[m[32m  // Scale the vector[m
[32m+[m[32m  void Scale (double a);[m
[32m+[m
[32m+[m[32m  // dot product[m
[32m+[m[32m  double DotProduct (const Vector3D & v) const;[m
[32m+[m
[32m+[m[32m  // cross product, return a new vector[m
[32m+[m[32m  Vector3D CrossProduct (const Vector3D & v) const;[m
[32m+[m
[32m+[m[32m  // inverse the vector[m
[32m+[m[32m  void Inverse ();[m
[32m+[m
[32m+[m[32m  // vector addtion[m
[32m+[m[32m  Vector3D & operator+(const Vector3D &v);[m
[32m+[m
[32m+[m[32m  // print the content[m
[32m+[m[32m  void Print() const;[m
[32m+[m
[32m+[m[32m};[m
[32m+[m
[32m+[m[32mstd::ostream &operator<<(std::ostream &os, const Vector3D & v);[m
[32m+[m
[32m+[m[32m#endif[m
[1mdiff --git a/cpp_example/lecture5/count_freq.cc b/cpp_example/lecture5/count_freq.cc[m
[1mnew file mode 100644[m
[1mindex 0000000..d25028e[m
[1m--- /dev/null[m
[1m+++ b/cpp_example/lecture5/count_freq.cc[m
[36m@@ -0,0 +1,24 @@[m
[32m+[m[32m#include <iostream>[m
[32m+[m
[32m+[m[32mint main()[m
[32m+[m[32m{[m
[32m+[m[32m  int old_value{0}, value{0};[m
[32m+[m[32m  int count{0};[m
[32m+[m[32m  if (std::cin >> value) {[m
[32m+[m[32m    old_value = value;[m
[32m+[m[32m    count++;[m
[32m+[m[32m    while(std::cin >> value) {[m
[32m+[m[32m      if (old_value == value) {[m
[32m+[m	[32mcount++;[m
[32m+[m[32m      } else {[m
[32m+[m	[32mstd::cout << "count of " << old_value[m
[32m+[m		[32m  << " is " << count << std::endl;[m
[32m+[m	[32mold_value = value;[m
[32m+[m	[32mcount = 1;[m
[32m+[m[32m      }[m
[32m+[m[32m    } // the while end here[m
[32m+[m[32m    std::cout << "count of " << old_value[m
[32m+[m	[32m      << " is " << count << std::endl;[m
[32m+[m[32m  } // the if end here[m
[32m+[m[32m  // no return statement here[m
[32m+[m[32m}[m
[1mdiff --git a/cpp_example/lecture5/func_example.cc b/cpp_example/lecture5/func_example.cc[m
[1mnew file mode 100644[m
[1mindex 0000000..51cc4c6[m
[1m--- /dev/null[m
[1m+++ b/cpp_example/lecture5/func_example.cc[m
[36m@@ -0,0 +1,19 @@[m
[32m+[m[32m#include <iostream>[m
[32m+[m
[32m+[m[32mint sum (int x, int y)[m
[32m+[m[32m{[m
[32m+[m[32m  return x + y;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mvoid print_sum (int x, int y)[m
[32m+[m[32m{[m
[32m+[m[32m  std::cout << "The sum of " << x << " and " << y[m
[32m+[m	[32m    << " is " << sum(x, y) << std::endl;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mint main ()[m
[32m+[m[32m{[m
[32m+[m[32m  int x{0}, y{0};[m
[32m+[m[32m  std::cin >> x >> y;[m
[32m+[m[32m  print_sum (x, y);[m
[32m+[m[32m}[m
[1mdiff --git a/cpp_example/lecture5/vector_func.cc b/cpp_example/lecture5/vector_func.cc[m
[1mnew file mode 100644[m
[1mindex 0000000..a9c18dd[m
[1m--- /dev/null[m
[1m+++ b/cpp_example/lecture5/vector_func.cc[m
[36m@@ -0,0 +1,18 @@[m
[32m+[m[32m#include "Vector3D.h"[m
[32m+[m
[32m+[m[32m#include <iostream>[m
[32m+[m
[32m+[m[32mint main () {[m
[32m+[m[32m  Vector3D v1(1, 2, 3);[m
[32m+[m[32m  Vector3D v2(-3, 1, 2);[m
[32m+[m[32m  std::cout << "v1 is " << v1 << std::endl;[m
[32m+[m[32m  std::cout << "v2 is " << v2 << std::endl;[m
[32m+[m[32m  v1 + v2;[m
[32m+[m[32m  std::cout << "after addition, v1 changed to: " << v1 << std::endl;[m
[32m+[m[32m  std::cout << "but v2 is still " << v2 << std::endl;[m
[32m+[m[32m  double s = v1.DotProduct(v2);[m
[32m+[m[32m  std::cout << "The dot production of v1 and v2 is " << s << std::endl;[m
[32m+[m[32m  Vector3D v3 = v1.CrossProduct(v2);[m
[32m+[m[32m  std::cout << "After cross production, v1 is " << v1 << ", v2 is "[m
[32m+[m	[32m    << v2 << ", and v3 is " << v3 << std::endl;[m
[32m+[m[32m}[m
[1mdiff --git a/cpp_example/lecture5/vector_length.cc b/cpp_example/lecture5/vector_length.cc[m
[1mnew file mode 100644[m
[1mindex 0000000..321507c[m
[1m--- /dev/null[m
[1m+++ b/cpp_example/lecture5/vector_length.cc[m
[36m@@ -0,0 +1,11 @@[m
[32m+[m[32m#include "Vector3D.h"[m
[32m+[m
[32m+[m[32m#include <iostream>[m
[32m+[m
[32m+[m[32mint main ()[m
[32m+[m[32m{[m
[32m+[m[32m  Vector3D v1(3, 4, 0);[m
[32m+[m[32m  v1.Print();[m
[32m+[m[32m  double a = v1.Length();[m
[32m+[m[32m  std::cout << "Its length is " << a << std::endl;[m
[32m+[m[32m}[m
[1mdiff --git a/cpp_example/lecture5/vector_scale.cc b/cpp_example/lecture5/vector_scale.cc[m
[1mnew file mode 100644[m
[1mindex 0000000..2c6c9b2[m
[1m--- /dev/null[m
[1m+++ b/cpp_example/lecture5/vector_scale.cc[m
[36m@@ -0,0 +1,9 @@[m
[32m+[m[32m#include "Vector3D.h"[m
[32m+[m
[32m+[m[32mint main ()[m
[32m+[m[32m{[m
[32m+[m[32m  Vector3D v1(3, 4, 5);[m
[32m+[m[32m  v1.Print();[m
[32m+[m[32m  v1.Scale(3);[m
[32m+[m[32m  v1.Print();[m
[32m+[m[32m}[m
[1mdiff --git a/cpp_example/lecture6/#Vector3D.cc# b/cpp_example/lecture6/#Vector3D.cc#[m
[1mnew file mode 100644[m
[1mindex 0000000..a703c8f[m
[1m--- /dev/null[m
[1m+++ b/cpp_example/lecture6/#Vector3D.cc#[m
[36m@@ -0,0 +1,45 @@[m
[32m+[m
[32m+[m
[32m+[m[32mvoid Vector3D::Scale (double a)[m
[32m+[m[32m{[m
[32m+[m[32m  x_ *= a;[m
[32m+[m[32m  y_ *= a;[m
[32m+[m[32m  z_ *= a;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mdouble Vector3D::DotProduct (const Vector3D & v) const[m
[32m+[m[32m{[m
[32m+[m[32m  return x_ * v.x_ + y_ * v.y_ + z_ * v.z_;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mVector3D Vector3D::CrossProduct (const Vector3D &v) const[m
[32m+[m[32m{[m
[32m+[m[32m  return Vector3D( y_ * v.z_ - z_ * v.y_,[m
[32m+[m		[32m   z_ * v.x_ - x_ * v.z_,[m
[32m+[m		[32m   x_ * v.y_ - y_ * v.x_);[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mvoid Vector3D::Print () const[m
[32m+[m[32m{[m
[32m+[m[32m  std::cout << "(" << x_ << ", " << y_ << ", " << z_ << ")" << std::endl;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mvoid Vector3D::Inverse ()[m
[32m+[m[32m{[m
[32m+[m[32m  Scale(-1);[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mVector3D & Vector3D::operator+ (const Vector3D & v)[m
[32m+[m[32m{[m
[32m+[m[32m  x_ += v.x_;[m
[32m+[m[32m  y_ += v.y_;[m
[32m+[m[32m  z_ += v.z_;[m
[32m+[m[32m  return *this;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mstd::ostream &operator<<(std::ostream &os, const Vector3D & v)[m
[32m+[m[32m{[m
[32m+[m[32m  os << "(" << v.GetX() << ", " << v.GetY() << ", "[m
[32m+[m[32m     << v.GetZ() << ")";[m
[32m+[m[32m  return os;[m
[32m+[m[32m}[m
[1mdiff --git a/cpp_example/lecture6/Makefile b/cpp_example/lecture6/Makefile[m
[1mnew file mode 100644[m
[1mindex 0000000..3d8b63d[m
[1m--- /dev/null[m
[1m+++ b/cpp_example/lecture6/Makefile[m
[36m@@ -0,0 +1,14 @@[m
[32m+[m[32mCXXFLAGS = -std=c++11[m
[32m+[m[32mOBJ = Vector3D.o[m
[32m+[m[32mTARGETS = vector_length vector_scale vector_func[m
[32m+[m[32mCC=g++[m
[32m+[m[32mall: $(TARGETS)[m
[32m+[m[32mvector_length: vector_length.o $(OBJ)[m
[32m+[m[32mvector_scale: vector_scale.o $(OBJ)[m
[32m+[m[32mvector_func: vector_func.o $(OBJ)[m
[32m+[m[32m%.o : %.cc[m
[32m+[m	[32m$(CXX) -c $(CXXFLAGS) $< -o $@[m
[32m+[m
[32m+[m[32m.PHONY: clean[m
[32m+[m[32mclean:[m
[32m+[m	[32mrm -f $(TARGETS) *.o *~[m
[1mdiff --git a/cpp_example/lecture6/Makefile.step1 b/cpp_example/lecture6/Makefile.step1[m
[1mnew file mode 100644[m
[1mindex 0000000..5c4aa6b[m
[1m--- /dev/null[m
[1m+++ b/cpp_example/lecture6/Makefile.step1[m
[36m@@ -0,0 +1,2 @@[m
[32m+[m[32mvector_length: vector_length.cc Vector3D.cc[m
[32m+[m	[32mg++ -o vector_length -std=c++11 vector_length.cc Vector3D.cc[m
[1mdiff --git a/cpp_example/lecture6/Makefile.step2 b/cpp_example/lecture6/Makefile.step2[m
[1mnew file mode 100644[m
[1mindex 0000000..a3c2b63[m
[1m--- /dev/null[m
[1m+++ b/cpp_example/lecture6/Makefile.step2[m
[36m@@ -0,0 +1,11 @@[m
[32m+[m[32mvector_length: vector_length.o Vector3D.o[m
[32m+[m	[32mg++ -o vector_length vector_length.o Vector3D.o[m
[32m+[m
[32m+[m[32mvector_length.o: vector_length.cc[m
[32m+[m	[32mg++ -c -std=c++11 vector_length.cc[m
[32m+[m
[32m+[m[32mVector3D.o: Vector3D.cc[m
[32m+[m	[32mg++ -c -std=c++11 Vector3D.cc[m
[32m+[m
[32m+[m[32mclean:[m
[32m+[m	[32mrm -f vector_length vector_length.o Vector3D.o *~[m
[1mdiff --git a/cpp_example/lecture6/Makefile.step3 b/cpp_example/lecture6/Makefile.step3[m
[1mnew file mode 100644[m
[1mindex 0000000..e2cd471[m
[1m--- /dev/null[m
[1m+++ b/cpp_example/lecture6/Makefile.step3[m
[36m@@ -0,0 +1,13 @@[m
[32m+[m[32mobjects = vector_length.o Vector3D.o[m
[32m+[m
[32m+[m[32mvector_length: $(objects)[m
[32m+[m	[32mg++ -o vector_length $(objects)[m
[32m+[m
[32m+[m[32mvector_length.o: vector_length.cc[m
[32m+[m	[32mg++ -c -std=c++11 vector_length.cc[m
[32m+[m
[32m+[m[32mVector3D.o: Vector3D.cc[m
[32m+[m	[32mg++ -c -std=c++11 Vector3D.cc[m
[32m+[m
[32m+[m[32mclean:[m
[32m+[m	[32mrm -f vector_length $(objects) *~[m
[1mdiff --git a/cpp_example/lecture6/Makefile.step4 b/cpp_example/lecture6/Makefile.step4[m
[1mnew file mode 100644[m
[1mindex 0000000..598eb70[m
[1m--- /dev/null[m
[1m+++ b/cpp_example/lecture6/Makefile.step4[m
[36m@@ -0,0 +1,12 @@[m
[32m+[m[32mobjects = vector_length.o Vector3D.o[m
[32m+[m
[32m+[m[32mCXXFLAGS = -std=c++11[m
[32m+[m[32mvector_length: $(objects)[m
[32m+[m	[32mg++ -o vector_length $(objects)[m
[32m+[m
[32m+[m[32mvector_length.o: vector_length.cc[m
[32m+[m[32mVector3D.o: Vector3D.cc[m
[32m+[m
[32m+[m[32m.PHONY: clean[m
[32m+[m[32mclean:[m
[32m+[m	[32mrm -f vector_length $(objects) *~[m
[1mdiff --git a/cpp_example/lecture6/Makefile.step5 b/cpp_example/lecture6/Makefile.step5[m
[1mnew file mode 100644[m
[1mindex 0000000..31fdd80[m
[1m--- /dev/null[m
[1m+++ b/cpp_example/lecture6/Makefile.step5[m
[36m@@ -0,0 +1,12 @@[m
[32m+[m[32mobjects = vector_length.o Vector3D.o[m
[32m+[m
[32m+[m[32mCXXFLAGS = -std=c++11[m
[32m+[m[32mvector_length: $(objects)[m
[32m+[m	[32mg++ $^ -o $@[m
[32m+[m
[32m+[m[32m%.o : %.cc[m
[32m+[m	[32m$(CXX) -c $(CXXFLAGS) $< -o $@[m
[32m+[m
[32m+[m[32m.PHONY: clean[m
[32m+[m[32mclean:[m
[32m+[m	[32mrm -f vector_length $(objects) *~[m
[1mdiff --git a/cpp_example/lecture6/Vector3D.cc b/cpp_example/lecture6/Vector3D.cc[m
[1mnew file mode 100644[m
[1mindex 0000000..14d7a25[m
[1m--- /dev/null[m
[1m+++ b/cpp_example/lecture6/Vector3D.cc[m
[36m@@ -0,0 +1,53 @@[m
[32m+[m[32m#include "Vector3D.h"[m
[32m+[m
[32m+[m[32m#include <cmath>[m
[32m+[m[32m#include <iostream>[m
[32m+[m
[32m+[m[32mdouble Vector3D::Length () const[m
[32m+[m[32m{[m
[32m+[m[32m  return std::sqrt(x_ * x_ + y_ * y_ + z_ * z_);[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mvoid Vector3D::Scale (double a)[m
[32m+[m[32m{[m
[32m+[m[32m  x_ *= a;[m
[32m+[m[32m  y_ *= a;[m
[32m+[m[32m  z_ *= a;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mdouble Vector3D::DotProduct (const Vector3D & v) const[m
[32m+[m[32m{[m
[32m+[m[32m  return x_ * v.x_ + y_ * v.y_ + z_ * v.z_;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mVector3D Vector3D::CrossProduct (const Vector3D &v) const[m
[32m+[m[32m{[m
[32m+[m[32m  return Vector3D( y_ * v.z_ - z_ * v.y_,[m
[32m+[m		[32m   z_ * v.x_ - x_ * v.z_,[m
[32m+[m		[32m   x_ * v.y_ - y_ * v.x_);[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mvoid Vector3D::Print () const[m
[32m+[m[32m{[m
[32m+[m[32m  std::cout << "(" << x_ << ", " << y_ << ", " << z_ << ")" << std::endl;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mvoid Vector3D::Inverse ()[m
[32m+[m[32m{[m
[32m+[m[32m  Scale(-1);[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mVector3D & Vector3D::operator+ (const Vector3D & v)[m
[32m+[m[32m{[m
[32m+[m[32m  x_ += v.x_;[m
[32m+[m[32m  y_ += v.y_;[m
[32m+[m[32m  z_ += v.z_;[m
[32m+[m[32m  return *this;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mstd::ostream &operator<<(std::ostream &os, const Vector3D & v)[m
[32m+[m[32m{[m
[32m+[m[32m  os << "(" << v.GetX() << ", " << v.GetY() << ", "[m
[32m+[m[32m     << v.GetZ() << ")";[m
[32m+[m[32m  return os;[m
[32m+[m[32m}[m
[1mdiff --git a/cpp_example/lecture6/Vector3D.h b/cpp_example/lecture6/Vector3D.h[m
[1mnew file mode 100644[m
[1mindex 0000000..2921758[m
[1m--- /dev/null[m
[1m+++ b/cpp_example/lecture6/Vector3D.h[m
[36m@@ -0,0 +1,56 @@[m
[32m+[m[32m#ifndef VECTOR_3D_H[m
[32m+[m[32m#define VECTOR_3D_H[m
[32m+[m
[32m+[m[32m#include <iostream>[m
[32m+[m
[32m+[m[32m// this is a simple example of a user-defined type[m
[32m+[m[32m// of vector 3d[m
[32m+[m
[32m+[m[32mclass Vector3D {[m
[32m+[m
[32m+[m[32mprivate:[m
[32m+[m[32m  double x_;[m
[32m+[m[32m  double y_;[m
[32m+[m[32m  double z_;[m
[32m+[m
[32m+[m[32mpublic:[m
[32m+[m[32m  // the default constructor[m
[32m+[m[32m  Vector3D (double x = 0, double y = 0, double z = 0)[m
[32m+[m[32m    :x_{x}, y_{y}, z_{z} {}[m
[32m+[m
[32m+[m[32m  // set functions[m
[32m+[m[32m  void SetX (double x) { x_ = x; }[m
[32m+[m[32m  void SetY (double y) { y_ = y; }[m
[32m+[m[32m  void SetZ (double z) { z_ = z; }[m
[32m+[m
[32m+[m[32m  // get functions[m
[32m+[m[32m  double GetX () const { return x_; }[m
[32m+[m[32m  double GetY () const { return y_; }[m
[32m+[m[32m  double GetZ () const { return z_; }[m
[32m+[m[41m  [m
[32m+[m[32m  // calculate the length of the vector[m
[32m+[m[32m  double Length () const;[m
[32m+[m
[32m+[m[32m  // Scale the vector[m
[32m+[m[32m  void Scale (double a);[m
[32m+[m
[32m+[m[32m  // dot product[m
[32m+[m[32m  double DotProduct (const Vector3D & v) const;[m
[32m+[m
[32m+[m[32m  // cross product, return a new vector[m
[32m+[m[32m  Vector3D CrossProduct (const Vector3D & v) const;[m
[32m+[m
[32m+[m[32m  // inverse the vector[m
[32m+[m[32m  void Inverse ();[m
[32m+[m
[32m+[m[32m  // vector addtion[m
[32m+[m[32m  Vector3D & operator+(const Vector3D &v);[m
[32m+[m
[32m+[m[32m  // print the content[m
[32m+[m[32m  void Print() const;[m
[32m+[m
[32m+[m[32m};[m
[32m+[m
[32m+[m[32mstd::ostream &operator<<(std::ostream &os, const Vector3D & v);[m
[32m+[m
[32m+[m[32m#endif[m
[1mdiff --git a/cpp_example/lecture6/vector_func.cc b/cpp_example/lecture6/vector_func.cc[m
[1mnew file mode 100644[m
[1mindex 0000000..a9c18dd[m
[1m--- /dev/null[m
[1m+++ b/cpp_example/lecture6/vector_func.cc[m
[36m@@ -0,0 +1,18 @@[m
[32m+[m[32m#include "Vector3D.h"[m
[32m+[m
[32m+[m[32m#include <iostream>[m
[32m+[m
[32m+[m[32mint main () {[m
[32m+[m[32m  Vector3D v1(1, 2, 3);[m
[32m+[m[32m  Vector3D v2(-3, 1, 2);[m
[32m+[m[32m  std::cout << "v1 is " << v1 << std::endl;[m
[32m+[m[32m  std::cout << "v2 is " << v2 << std::endl;[m
[32m+[m[32m  v1 + v2;[m
[32m+[m[32m  std::cout << "after addition, v1 changed to: " << v1 << std::endl;[m
[32m+[m[32m  std::cout << "but v2 is still " << v2 << std::endl;[m
[32m+[m[32m  double s = v1.DotProduct(v2);[m
[32m+[m[32m  std::cout << "The dot production of v1 and v2 is " << s << std::endl;[m
[32m+[m[32m  Vector3D v3 = v1.CrossProduct(v2);[m
[32m+[m[32m  std::cout << "After cross production, v1 is " << v1 << ", v2 is "[m
[32m+[m	[32m    << v2 << ", and v3 is " << v3 << std::endl;[m
[32m+[m[32m}[m
[1mdiff --git a/cpp_example/lecture6/vector_length.cc b/cpp_example/lecture6/vector_length.cc[m
[1mnew file mode 100644[m
[1mindex 0000000..321507c[m
[1m--- /dev/null[m
[1m+++ b/cpp_example/lecture6/vector_length.cc[m
[36m@@ -0,0 +1,11 @@[m
[32m+[m[32m#include "Vector3D.h"[m
[32m+[m
[32m+[m[32m#include <iostream>[m
[32m+[m
[32m+[m[32mint main ()[m
[32m+[m[32m{[m
[32m+[m[32m  Vector3D v1(3, 4, 0);[m
[32m+[m[32m  v1.Print();[m
[32m+[m[32m  double a = v1.Length();[m
[32m+[m[32m  std::cout << "Its length is " << a << std::endl;[m
[32m+[m[32m}[m
[1mdiff --git a/cpp_example/lecture6/vector_scale.cc b/cpp_example/lecture6/vector_scale.cc[m
[1mnew file mode 100644[m
[1mindex 0000000..2c6c9b2[m
[1m--- /dev/null[m
[1m+++ b/cpp_example/lecture6/vector_scale.cc[m
[36m@@ -0,0 +1,9 @@[m
[32m+[m[32m#include "Vector3D.h"[m
[32m+[m
[32m+[m[32mint main ()[m
[32m+[m[32m{[m
[32m+[m[32m  Vector3D v1(3, 4, 5);[m
[32m+[m[32m  v1.Print();[m
[32m+[m[32m  v1.Scale(3);[m
[32m+[m[32m  v1.Print();[m
[32m+[m[32m}[m
[1mdiff --git a/cpp_example/lecture7/Makefile b/cpp_example/lecture7/Makefile[m
[1mnew file mode 100644[m
[1mindex 0000000..c3290e3[m
[1m--- /dev/null[m
[1m+++ b/cpp_example/lecture7/Makefile[m
[36m@@ -0,0 +1,11 @@[m
[32m+[m[32mTARGET = type_size check_char use_v3d[m
[32m+[m
[32m+[m[32mCXXFLAGS = -std=c++11[m
[32m+[m[32mCC = g++[m
[32m+[m
[32m+[m[32mall: $(TARGET)[m
[32m+[m
[32m+[m[32m.PHONY: clean[m
[32m+[m
[32m+[m[32mclean:[m
[32m+[m	[32mrm -f $(TARGET) *.o *~[m
[1mdiff --git a/cpp_example/lecture7/Vector3D.h b/cpp_example/lecture7/Vector3D.h[m
[1mnew file mode 100644[m
[1mindex 0000000..082501a[m
[1m--- /dev/null[m
[1m+++ b/cpp_example/lecture7/Vector3D.h[m
[36m@@ -0,0 +1,10 @@[m
[32m+[m[32m#ifndef VECTOR3D_H_[m
[32m+[m[32m#define VECTOR3D_H_[m
[32m+[m
[32m+[m[32mstruct Vector3D {[m
[32m+[m[32m    double x;[m
[32m+[m[32m    double y;[m
[32m+[m[32m    double z;[m
[32m+[m[32m};[m
[32m+[m
[32m+[m[32m#endif // VECTOR3D_H_[m
[1mdiff --git a/cpp_example/lecture7/check_char b/cpp_example/lecture7/check_char[m
[1mnew file mode 100755[m
[1mindex 0000000..dd0e442[m
Binary files /dev/null and b/cpp_example/lecture7/check_char differ
[1mdiff --git a/cpp_example/lecture7/check_char.cc b/cpp_example/lecture7/check_char.cc[m
[1mnew file mode 100644[m
[1mindex 0000000..8ab90eb[m
[1m--- /dev/null[m
[1m+++ b/cpp_example/lecture7/check_char.cc[m
[36m@@ -0,0 +1,13 @@[m
[32m+[m[32m#include <iostream>[m
[32m+[m
[32m+[m[32mint main ()[m
[32m+[m[32m{[m
[32m+[m[32m    char c = 255;[m
[32m+[m[32m    signed char sc = 255;[m
[32m+[m[32m    unsigned char uc = 255;[m
[32m+[m
[32m+[m[32m    std::cout << "char c = " << 0 + c << std::endl;[m
[32m+[m[32m    std::cout << "signed char sc = " << 0 + sc << std::endl;[m
[32m+[m[32m    std::cout << "unsigned char uc = " << 0 + uc << std::endl;[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/cpp_example/lecture7/type_size b/cpp_example/lecture7/type_size[m
[1mnew file mode 100755[m
[1mindex 0000000..ab1e2dd[m
Binary files /dev/null and b/cpp_example/lecture7/type_size differ
[1mdiff --git a/cpp_example/lecture7/type_size.cc b/cpp_example/lecture7/type_size.cc[m
[1mnew file mode 100644[m
[1mindex 0000000..7841df5[m
[1m--- /dev/null[m
[1m+++ b/cpp_example/lecture7/type_size.cc[m
[36m@@ -0,0 +1,18 @@[m
[32m+[m[32m#include <iostream>[m
[32m+[m
[32m+[m[32musing namespace std;[m
[32m+[m[32mint main ()[m
[32m+[m[32m{[m
[32m+[m[32m    cout << "size of bool = " << sizeof(bool) * 8 << " bits." << endl;[m
[32m+[m[32m    cout << "size of char = " << sizeof(char) * 8 << " bits." << endl;[m
[32m+[m[32m    cout << "size of wchar_t = " << sizeof(wchar_t) * 8 << " bits." << endl;[m
[32m+[m[32m    cout << "size of char16_t = " << sizeof(char16_t) * 8 << " bits." << endl;[m
[32m+[m[32m    cout << "size of char32_t = " << sizeof(char32_t) * 8 << " bits." << endl;[m
[32m+[m[32m    cout << "size of short = " << sizeof(short) * 8 << " bits." << endl;[m
[32m+[m[32m    cout << "size of int = " << sizeof(int) * 8 << " bits." << endl;[m
[32m+[m[32m    cout << "size of long = " << sizeof(long) * 8 << " bits." << endl;[m
[32m+[m[32m    cout << "size of long long = " << sizeof(long long) * 8 << " bits." << endl;[m
[32m+[m[32m    cout << "size of float = " << sizeof(float) * 8 << " bits." << endl;[m
[32m+[m[32m    cout << "size of double = " << sizeof(double) * 8 << " bits." << endl;[m
[32m+[m[32m    cout << "size of long double = " << sizeof(long double) * 8 << " bits." << endl;[m
[32m+[m[32m}[m
[1mdiff --git a/cpp_example/lecture7/use_v3d b/cpp_example/lecture7/use_v3d[m
[1mnew file mode 100755[m
[1mindex 0000000..f9361e7[m
Binary files /dev/null and b/cpp_example/lecture7/use_v3d differ
[1mdiff --git a/cpp_example/lecture7/use_v3d.cc b/cpp_example/lecture7/use_v3d.cc[m
[1mnew file mode 100644[m
[1mindex 0000000..291ff31[m
[1m--- /dev/null[m
[1m+++ b/cpp_example/lecture7/use_v3d.cc[m
[36m@@ -0,0 +1,19 @@[m
[32m+[m[32m#include "Vector3D.h"[m
[32m+[m
[32m+[m[32m#include <iostream>[m
[32m+[m[32m#include <cmath>[m
[32m+[m
[32m+[m[32mint main ()[m
[32m+[m[32m{[m
[32m+[m[32m    using V3D = Vector3D;[m
[32m+[m
[32m+[m[32m    V3D v;[m
[32m+[m[32m    v.x = 1.2;[m
[32m+[m[32m    v.y = 2.3;[m
[32m+[m[32m    v.z = 3.4;[m
[32m+[m
[32m+[m[32m    std::cout << "length of vector v is "[m
[32m+[m[32m              << std::sqrt(v.x*v.x + v.y*v.y + v.z*v.z)[m
[32m+[m[32m              << std::endl;[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/readme.txt b/readme.txt[m
[1mindex c32fff7..5da3c38 100644[m
[1m--- a/readme.txt[m
[1m+++ b/readme.txt[m
[36m@@ -1,2 +1,4 @@[m
 This is a git repository![m
 It tracks the history.[m
[32m+[m
[32m+[m[32mThis is a git repository for my cpp courses of Physics[m
